git vs github
local: git init; git branch -M main; git add .; commit -m "text"; 
git remote add origin git@github.com:*** - needed one time
git push origin main
github.com/namastedev/namaste-react
set up github ssh
for production/scaling: optimise, remove comments, clean, remove console logs, minify, bundling, compress, optimise images, 
                        code-splitting, chunking, caching - done by bundler
                        processing in local first - lot of engineering behind the scenes
npx create react app scaffold already ignited
.15
lot of other packages and libraries needed to make app fast - not just react
npm manages packages but does not stand for node package manager; repository for packages
npm init -y but better without -y
jest for testing; entry point: App.js 
npm init -> package.json - config file for npm; manages dependencies
most important package is a bundler - webpack, vite, parcel - to ship to production
create react app uses webpack and babel
parcel (a node package) easy to configure - will ignite our app - parcel is a beast
npm install -D parcel       creates node_modules
two types of dependencies: dev and normal
tilde (major ver) vs caret (minor ver) for dependencies -caret is safer
package.json vs package-lock.json
integrity sha512 - package-lock.json keeps track of all the exact versions of all the dependencies
node_modules contains all the code fetched from npm i; a database of all the packages
parcel has its own dependencies, they in turn their own - called transitive dependencies
parcel needs help of babel - also a beast
parcel has its own package.json - dependency tree - so node_modules is huge - "works on my machine" issue
node_modules should not be pushed to git - inside .gitignore
package.json and package-lock.json must be placed in git - all node_modules can be recreated by npm i 
npm i creates package-lock.json or updates it
npm init creates package.json or when a new package is installed
npx parcel index.html
npx = executing a package
parcel has pushed out and hosted a dev build
CDNs - not a good way to bring react into project - costly operation to fetch - put react in node modules 
     - no network calls needed plus safe against CDN changes
npn i react-dom
imports come from node modules
type="module"
react is not the only thing making things fast - parcel is very important - but parcel has other helpers
parcel - dev build, local server, HMR, file watching algo in C++, caching - faster builds, 
            image optimisation, minification, bundling, compression, manages everything, consistent hashing,
            code splitting, differential bundling - supports older browsers, diagnostics, error handling, https,
            tree shaking (removes unused code), different dev and prod bundles
.parcel-cache - regenerates
emojis in html - cntrl+cmd+spacebar
parceljs.origin for excellent documentation
production-ready large-scale application - system design interview
prod build: npx parcel build index.html
dev build: npx parcel index.html
remove "main": "App.js" from package.json to avoid error - was auto generated by npm - entry point of App - dist folder
dist folder includes dev build plus prod build (highly optimised and performant)
local -> git -> server
.gitignore - /dist, /node_modules, .parcel-cache
browserslist - support - does not mean iy won't support the rest 
browserslist.dev
































